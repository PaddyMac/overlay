2010-10-13  H.J. Lu  <hongjiu.lu@intel.com>

	PR libc/12113
	* dl1.h: New.
	* dl1mod1.c: Likewise.
	* dl1mod2.c: Likewise.
	* tst-dl1.c: Likewise.

	* Makefile (distribute): Add dl1.h.
	(tests): Add tst-dl1.
	(modules-names): Add dl1mod1 and dl1mod2.
	(tst-dl1mod1.so-no-z-defs): New.
	(tst-dl1mod2.so-no-z-defs): Likewise.
	($(objpfx)tst-dl1): Likewise.
	($(objpfx)tst-dl1.out): Likewise.
	($(objpfx)dl1mod1.so): Likewise.

	* sysdeps/x86_64/pthreaddef.h (TCB_ALIGNMENT): Changed to 32.

	* sysdeps/x86_64/tls.h (TLS_TCB_ALIGN): Defined with alignment
	of "struct pthread".

--- nptl/Makefile
+++ nptl/Makefile
@@ -269,7 +269,7 @@ tests-nolibpthread = tst-unload
 # of the page size since every architecture's page size is > 1k.
 tst-oddstacklimit-ENV = ; ulimit -s 1023;
 
-distribute = eintr.c tst-cleanup4aux.c
+distribute = eintr.c tst-cleanup4aux.c dl1.h
 
 gen-as-const-headers = pthread-errnos.sym
 
@@ -288,7 +288,7 @@ tests += tst-cancelx2 tst-cancelx3 tst-cancelx4 tst-cancelx5 \
 endif
 ifeq ($(build-shared),yes)
 tests += tst-atfork2 tst-tls3 tst-tls4 tst-tls5 tst-_res1 tst-fini1 \
-	 tst-stackguard1
+	 tst-stackguard1 tst-dl1
 tests-nolibpthread += tst-fini1
 ifeq ($(have-z-execstack),yes)
 tests += tst-execstack
@@ -298,7 +298,8 @@ endif
 modules-names = tst-atfork2mod tst-tls3mod tst-tls4moda tst-tls4modb \
 		tst-tls5mod tst-tls5moda tst-tls5modb tst-tls5modc \
 		tst-tls5modd tst-tls5mode tst-tls5modf \
-		tst-_res1mod1 tst-_res1mod2 tst-execstack-mod tst-fini1mod
+		tst-_res1mod1 tst-_res1mod2 tst-execstack-mod tst-fini1mod \
+		dl1mod1 dl1mod2
 extra-test-objs += $(addsuffix .os,$(strip $(modules-names))) tst-cleanup4aux.o
 test-extras += $(modules-names)
 test-modules = $(addprefix $(objpfx),$(addsuffix .so,$(modules-names)))
@@ -312,6 +313,8 @@ tst-tls5modc.so-no-z-defs = yes
 tst-tls5modd.so-no-z-defs = yes
 tst-tls5mode.so-no-z-defs = yes
 tst-tls5modf.so-no-z-defs = yes
+tst-dl1mod1.so-no-z-defs = yes
+tst-dl1mod2.so-no-z-defs = yes
 
 ifeq ($(build-shared),yes)
 # Build all the modules even when not actually running test programs.
@@ -508,6 +511,11 @@ endif
 
 LDFLAGS-tst-cancel24 = -lstdc++
 
+$(objpfx)tst-dl1: $(libdl) $(shared-thread-library)
+$(objpfx)tst-dl1.out: $(objpfx)dl1mod1.so $(objpfx)dl1mod2.so
+
+$(objpfx)dl1mod1.so: $(objpfx)dl1mod2.so
+
 extra-B-pthread.so = -B$(common-objpfx)nptl/
 $(objpfx)libpthread.so: $(addprefix $(objpfx),$(crti-objs) $(crtn-objs))
 $(objpfx)libpthread.so: +preinit += $(addprefix $(objpfx),$(crti-objs))
--- /dev/null
+++ nptl/dl1.h
@@ -0,0 +1,10 @@
+#include <stdio.h>
+
+extern void hello1 (void);
+extern void hello2 (void);
+
+void
+hello (void)
+{
+  printf("Hello, World!\n");
+}
--- /dev/null
+++ nptl/dl1mod1.c
@@ -0,0 +1,8 @@
+#include "dl1.h"
+
+void
+hello1 (void)
+{
+  hello ();
+  hello2 ();
+}
--- /dev/null
+++ nptl/dl1mod2.c
@@ -0,0 +1,7 @@
+#include "dl1.h"
+
+void
+hello2(void)
+{
+  hello ();
+}
--- nptl/sysdeps/x86_64/pthreaddef.h
+++ nptl/sysdeps/x86_64/pthreaddef.h
@@ -27,8 +27,9 @@
 /* Minimal stack size after allocating thread descriptor and guard size.  */
 #define MINIMAL_REST_STACK	2048
 
-/* Alignment requirement for TCB.  */
-#define TCB_ALIGNMENT		16
+/* Alignment requirement for TCB.  Need to store post-AVX vector registers
+   in the TCB and we want the storage to be aligned at 32-byte.  */
+#define TCB_ALIGNMENT		32
 
 
 /* Location of current stack frame.  The frame pointer is not usable.  */
--- nptl/sysdeps/x86_64/tls.h
+++ nptl/sysdeps/x86_64/tls.h
@@ -117,12 +117,7 @@ typedef struct
 # define TLS_TCB_SIZE sizeof (struct pthread)
 
 /* Alignment requirements for the TCB.  */
-//# define TLS_TCB_ALIGN __alignof__ (struct pthread)
-// Normally the above would be correct  But we have to store post-AVX
-// vector registers in the TCB and we want the storage to be aligned.
-// unfortunately there isn't yet a type for these values and hence no
-// 32-byte alignment requirement.  Make this explicit, for now.
-# define TLS_TCB_ALIGN 32
+# define TLS_TCB_ALIGN __alignof__ (struct pthread)
 
 /* The TCB can have any size and the memory following the address the
    thread pointer points to is unspecified.  Allocate the TCB there.  */
--- /dev/null
+++ nptl/tst-dl1.c
@@ -0,0 +1,23 @@
+#include <dlfcn.h>
+#include <assert.h>
+#include <pthread.h>
+
+void* doTask(void* data)
+{
+	void* handle = dlopen("dl1mod1.so", RTLD_LAZY);
+	assert(handle);
+	typedef int (*hello_t)(void);
+	hello_t hello1 = (hello_t)dlsym(handle, "hello1");
+	assert(dlerror() == 0);
+	hello1();
+	return NULL;
+}
+
+int main()
+{
+	pthread_t tid;
+	pthread_create(&tid, NULL, &doTask, NULL);
+	pthread_join(tid, NULL);
+
+	return 0;
+}
