From 81bfee65674a81a826b32629e218e457b5ef6b4b Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Thu, 13 Feb 2014 16:07:15 -0700
Subject: server: Inherit security attributes from parent directories on
 creation.

---
 dlls/advapi32/tests/security.c |   40 ++++++++++-
 server/change.c                |    2 +-
 server/file.c                  |  146 +++++++++++++++++++++++++++++++++++++++-
 server/file.h                  |    2 +-
 4 files changed, 184 insertions(+), 6 deletions(-)

diff --git a/dlls/advapi32/tests/security.c b/dlls/advapi32/tests/security.c
index b71bad3..cad8ca9 100644
--- a/dlls/advapi32/tests/security.c
+++ b/dlls/advapi32/tests/security.c
@@ -3030,10 +3030,11 @@ static void test_CreateDirectoryA(void)
     ACL_SIZE_INFORMATION acl_size;
     ACCESS_ALLOWED_ACE *ace;
     SECURITY_ATTRIBUTES sa;
+    char tmpfile[MAX_PATH];
     char tmpdir[MAX_PATH];
+    HANDLE token, hTemp;
     struct _SID *owner;
     BOOL bret = TRUE;
-    HANDLE token;
     DWORD error;
     PACL pDacl;
 
@@ -3125,6 +3126,43 @@ static void test_CreateDirectoryA(void)
                                   ace->Mask);
     }
 
+    /* Test inheritance of ACLs */
+    strcpy(tmpfile, tmpdir);
+    lstrcatA(tmpfile, "/tmpfile");
+    hTemp = CreateFileA(tmpfile, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_NEW,
+                        FILE_FLAG_DELETE_ON_CLOSE, NULL);
+    error = pGetNamedSecurityInfoA(tmpfile, SE_FILE_OBJECT,
+                                   OWNER_SECURITY_INFORMATION|DACL_SECURITY_INFORMATION, (PSID*)&owner,
+                                   NULL, &pDacl, NULL, &pSD);
+    ok(error == ERROR_SUCCESS, "Failed to get permissions on file.\n");
+    bret = pGetAclInformation(pDacl, &acl_size, sizeof(acl_size), AclSizeInformation);
+    ok(bret, "GetAclInformation failed\n");
+    ok(acl_size.AceCount == 2, "GetAclInformation returned unexpected entry count (%d != 2).\n",
+                               acl_size.AceCount);
+    if (acl_size.AceCount > 0)
+    {
+        bret = pGetAce(pDacl, 0, (VOID **)&ace);
+        ok(bret, "Inherited Failed to get Current User ACE.\n");
+        bret = EqualSid(&ace->SidStart, user_sid);
+        ok(bret, "Inherited Current User ACE != Current User SID.\n");
+        ok(((ACE_HEADER *)ace)->AceFlags == INHERITED_ACE,
+           "Inherited Current User ACE has unexpected flags (0x%x != 0x10)\n", ((ACE_HEADER *)ace)->AceFlags);
+        ok(ace->Mask == 0x1f01ff, "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n",
+                                  ace->Mask);
+    }
+    if (acl_size.AceCount > 1)
+    {
+        bret = pGetAce(pDacl, 1, (VOID **)&ace);
+        ok(bret, "Inherited Failed to get Administators Group ACE.\n");
+        bret = EqualSid(&ace->SidStart, admin_sid);
+        ok(bret, "Inherited Administators Group ACE != Administators Group SID.\n");
+        ok(((ACE_HEADER *)ace)->AceFlags == INHERITED_ACE,
+           "Inherited Administators Group ACE has unexpected flags (0x%x != 0x10)\n", ((ACE_HEADER *)ace)->AceFlags);
+        ok(ace->Mask == 0x1f01ff, "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n",
+                                  ace->Mask);
+    }
+    CloseHandle(hTemp);
+
 done:
     HeapFree(GetProcessHeap(), 0, user);
     bret = RemoveDirectoryA(tmpdir);
diff --git a/server/change.c b/server/change.c
index 0b7b979..14f37c3 100644
--- a/server/change.c
+++ b/server/change.c
@@ -292,7 +292,7 @@ static struct security_descriptor *dir_get_sd( struct object *obj )
     assert( obj->ops == &dir_ops );
 
     fd = dir_get_fd( obj );
-    sd = file_get_acls( obj, fd, &dir->mode, &dir->uid );
+    sd = file_get_acls( obj, fd, &dir->mode, &dir->uid, TRUE );
     release_object( fd );
     return sd;
 }
diff --git a/server/file.c b/server/file.c
index 0df2245..c115ff7 100644
--- a/server/file.c
+++ b/server/file.c
@@ -242,11 +242,141 @@ void set_xattr_acls( int fd, const struct security_descriptor *sd )
 #endif
 }
 
+struct security_descriptor *inherit_sd( const struct security_descriptor *parent_sd, int is_dir )
+{
+    DWORD inheritance_mask = INHERIT_ONLY_ACE|OBJECT_INHERIT_ACE|CONTAINER_INHERIT_ACE;
+    struct security_descriptor *sd = NULL;
+    const ACL *parent_dacl;
+    int present;
+    ACL *dacl;
+
+    parent_dacl = sd_get_dacl( parent_sd, &present );
+    if (present && parent_dacl)
+    {
+        size_t dacl_size = sizeof(ACL), ace_count = 0;
+        const ACE_HEADER *parent_ace;
+        const SID *user, *group;
+        ACE_HEADER *ace;
+        char *ptr;
+        ULONG i;
+
+        /* Calculate the size of the DACL */
+        parent_ace = (const ACE_HEADER *)(parent_dacl + 1);
+        for (i = 0; i < parent_dacl->AceCount; i++, parent_ace = ace_next( parent_ace ))
+        {
+            int multiplier = 1;
+
+            if (!(parent_ace->AceFlags & inheritance_mask)) continue;
+
+            ace_count += multiplier;
+            dacl_size += multiplier * parent_ace->AceSize;
+        }
+        if(!ace_count) return sd; /* No inheritance */
+
+        /* Fill in the security descriptor so that it is compatible with our DACL */
+        user = (const SID *)(parent_sd + 1);
+        group = (const SID *)((char *)(parent_sd + 1) + parent_sd->owner_len);
+        sd = mem_alloc( sizeof(struct security_descriptor) + security_sid_len( user )
+                        + security_sid_len( group ) + dacl_size );
+        if (!sd) return sd;
+        sd->control = SE_DACL_PRESENT;
+        sd->owner_len = parent_sd->owner_len;
+        sd->group_len = parent_sd->group_len;
+        sd->sacl_len = 0;
+        sd->dacl_len = dacl_size;
+        ptr = (char *)(sd + 1);
+        memcpy( ptr, user, sd->owner_len );
+        ptr += sd->owner_len;
+        memcpy( ptr, group, sd->group_len );
+        ptr += sd->group_len;
+        dacl = (ACL *)ptr;
+        dacl->AclRevision = ACL_REVISION;
+        dacl->Sbz1 = 0;
+        dacl->AclSize = dacl_size;
+        dacl->AceCount = ace_count;
+        dacl->Sbz2 = 0;
+        ace = (ACE_HEADER *)(dacl + 1);
+
+        /* Build the new DACL, inheriting from the parent's information */
+        parent_ace = (const ACE_HEADER *)(parent_dacl + 1);
+        for (i = 0; i < parent_dacl->AceCount; i++, parent_ace = ace_next( parent_ace ))
+        {
+            DWORD flags = parent_ace->AceFlags;
+
+            if (!(flags & inheritance_mask)) continue;
+
+            ace->AceType = parent_ace->AceType;
+            if(is_dir && (flags & CONTAINER_INHERIT_ACE))
+                flags &= ~INHERIT_ONLY_ACE;
+            else if(!is_dir && (flags & OBJECT_INHERIT_ACE))
+                flags &= ~INHERIT_ONLY_ACE;
+            else if(is_dir && (flags & OBJECT_INHERIT_ACE))
+                flags |= INHERIT_ONLY_ACE;
+            if(is_dir)
+                ace->AceFlags = flags | INHERITED_ACE;
+            else
+                ace->AceFlags = (parent_ace->AceFlags & ~inheritance_mask) | INHERITED_ACE;
+            ace->AceSize = parent_ace->AceSize;
+            memcpy( ace + 1, parent_ace + 1, parent_ace->AceSize - sizeof(ACE_HEADER));
+            ace = (ACE_HEADER *)ace_next( ace );
+        }
+    }
+    return sd;
+}
+
+static struct security_descriptor *file_get_parent_sd( struct fd *root, char *parent_name,
+                                                       int is_dir )
+{
+    struct security_descriptor *sd = NULL;
+    int len = strlen( parent_name );
+    mode_t parent_mode = 0555;
+    struct fd *parent_fd;
+    char *slash;
+
+    /* Even if the file is a directory we need its parent, so skip any terminating slash */
+    if (parent_name[len-1] == '/')
+        parent_name[len-1] = 0;
+    /* Find the last slash in the filename and terminate the name there */
+    slash = strrchr(parent_name, '/');
+    if (slash)
+        slash[0] = 0;
+    else
+        parent_name[0] = 0;
+
+    parent_fd = open_fd( root, parent_name, O_NONBLOCK | O_LARGEFILE, &parent_mode,
+                         READ_CONTROL|ACCESS_SYSTEM_SECURITY,
+                         FILE_SHARE_READ|FILE_SHARE_WRITE|FILE_SHARE_DELETE,
+                         FILE_OPEN_FOR_BACKUP_INTENT );
+    if(parent_fd)
+    {
+        struct object *obj;
+
+        if ((obj = create_file_obj( parent_fd, READ_CONTROL|ACCESS_SYSTEM_SECURITY, parent_mode )))
+        {
+            struct file *file = (struct file *)obj;
+            struct fd *fd;
+
+            fd = file_get_fd( obj );
+            if (fd)
+            {
+                sd = file_get_acls( obj, fd, &file->mode, &file->uid, FALSE );
+                release_object( fd );
+            }
+            if (sd)
+                sd = inherit_sd( sd, is_dir );
+            release_object( obj );
+        }
+        release_object( parent_fd );
+    }
+    return sd;
+}
+
 static struct object *create_file( struct fd *root, const char *nameptr, data_size_t len,
                                    unsigned int access, unsigned int sharing, int create,
                                    unsigned int options, unsigned int attrs,
                                    const struct security_descriptor *sd )
 {
+    struct security_descriptor *temp_sd = NULL;
     struct object *obj = NULL;
     struct fd *fd;
     int flags;
@@ -275,6 +405,15 @@ static struct object *create_file( struct fd *root, const char *nameptr, data_si
     default:                set_error( STATUS_INVALID_PARAMETER ); goto done;
     }
 
+    if (!sd && (create == FILE_CREATE || create == FILE_OVERWRITE_IF))
+    {
+        /* Note: inheritance of security descriptors only occurs on creation when sd is NULL */
+        char *child_name = strndup( nameptr, len );
+
+        sd = temp_sd = file_get_parent_sd( root, child_name, options & FILE_DIRECTORY_FILE );
+        free(child_name);
+    }
+
     if (sd)
     {
         const SID *owner = sd_get_owner( sd );
@@ -315,6 +454,7 @@ static struct object *create_file( struct fd *root, const char *nameptr, data_si
     release_object( fd );
 
 done:
+    free( temp_sd );
     free( name );
     return obj;
 }
@@ -659,7 +799,7 @@ void convert_generic_sd( struct security_descriptor *sd )
 }
 
 struct security_descriptor *file_get_acls( struct object *obj, struct fd *fd, mode_t *mode,
-                                           uid_t *uid )
+                                           uid_t *uid, int convert_generic )
 {
     int unix_fd = get_unix_fd( fd );
     struct security_descriptor *sd;
@@ -677,7 +817,7 @@ struct security_descriptor *file_get_acls( struct object *obj, struct fd *fd, mo
     user = security_unix_uid_to_sid( st.st_uid );
     group = token_get_primary_group( current->process->token );
     sd = get_xattr_acls( unix_fd, user, group );
-    if (sd) convert_generic_sd( sd );
+    if (sd && convert_generic) convert_generic_sd( sd );
     if (!sd) sd = mode_to_sd( st.st_mode, user, group);
     if (!sd) return obj->sd;
 
@@ -697,7 +837,7 @@ static struct security_descriptor *file_get_sd( struct object *obj )
     assert( obj->ops == &file_ops );
 
     fd = file_get_fd( obj );
-    sd = file_get_acls( obj, fd, &file->mode, &file->uid );
+    sd = file_get_acls( obj, fd, &file->mode, &file->uid, TRUE );
     release_object( fd );
     return sd;
 }
diff --git a/server/file.h b/server/file.h
index 89b5888..0905fbb 100644
--- a/server/file.h
+++ b/server/file.h
@@ -125,7 +125,7 @@ extern mode_t sd_to_mode( const struct security_descriptor *sd, const SID *owner
 extern int file_set_acls( struct object *obj, struct fd *fd, const struct security_descriptor *sd,
                           unsigned int set_info );
 extern struct security_descriptor *file_get_acls( struct object *obj, struct fd *fd, mode_t *mode,
-                                                  uid_t *uid );
+                                                  uid_t *uid, int convert_generic );
 
 /* file mapping functions */
 
-- 
1.7.9.5

